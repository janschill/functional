module FP05_3 where

import Helper

{-
Insertion sort iterates over a list of to be sorted items and alaywas compares the current item with the rest of the already sorted list
[3,2,5,1,4] - 2
[2,3,5,1,4] - 3
[2,3,5,1,4] - 5
[2,3,5,1,4] - 1
[2,3,1,5,4] - 1
[2,1,3,5,4] - 1
[1,2,3,5,4] - 1
[1,2,3,5,4] - 4
[1,2,3,4,5] - 4
-}

random1000 = [465,9,595,808,534,196,241,944,355,485,865,324,981,690,243,777,794,399,357,199,127,62,181,858,343,16,945,839,491,801,308,10,831,526,567,926,422,995,676,134,751,345,539,410,56,385,558,347,286,354,695,992,203,548,380,36,93,673,744,807,84,201,500,938,110,293,846,786,118,515,179,674,445,762,928,971,263,400,348,87,651,957,764,710,504,688,760,898,296,645,737,124,939,174,200,669,275,139,55,287,414,552,149,300,105,682,622,918,758,774,206,109,689,555,772,177,268,330,246,755,875,123,205,212,912,532,279,164,129,796,234,994,39,717,765,864,40,417,631,652,951,513,120,767,559,180,818,267,435,229,747,266,837,910,68,672,132,686,959,874,498,18,876,472,141,824,756,390,520,986,482,973,815,826,374,665,458,921,186,970,252,814,298,27,271,258,734,207,629,633,948,870,387,795,502,698,611,30,547,494,403,52,769,517,962,426,940,46,850,259,95,117,566,509,230,332,680,438,430,702,22,867,352,724,337,57,836,511,638,145,382,714,245,980,731,304,333,468,167,892,954,565,728,648,700,908,490,607,407,107,25,193,294,891,408,899,589,754,214,311,575,432,236,1000,946,232,4,691,41,743,281,439,628,58,843,522,914,176,615,147,251,165,965,591,182,396,416,372,185,659,557,884,309,66,598,269,932,466,600,630,832,101,173,950,115,997,845,543,606,983,302,64,677,560,171,704,544,713,34,806,933,359,635,503,942,853,793,150,496,549,319,321,512,634,160,192,523,768,37,316,104,388,69,701,331,257,905,477,74,221,978,135,291,709,481,507,989,423,925,218,569,519,159,78,292,224,43,253,273,643,670,480,72,444,715,327,524,449,75,541,789,227,749,473,937,538,366,373,338,883,450,736,261,168,91,405,546,33,748,733,730,195,342,59,278,13,85,979,158,771,431,885,154,492,32,574,930,70,453,525,683,527,29,459,719,626,28,456,924,452,586,564,341,929,166,71,262,879,5,467,112,842,882,835,664,529,644,98,770,469,306,448,189,451,329,213,576,685,48,641,667,233,313,851,866,143,487,721,506,855,35,706,89,175,231,470,424,225,514,516,478,242,872,579,371,462,590,550,703,210,31,982,389,602,137,825,848,406,318,841,812,1,119,608,655,972,820,726,121,561,303,746,984,790,881,284,128,692,383,125,627,188,859,351,533,437,923,2,636,623,190,563,584,844,570,402,666,17,830,140,447,255,720,80,358,96,379,553,838,727,888,619,961,562,521,326,288,102,38,464,605,694,290,618,805,537,12,77,97,798,215,301,949,968,834,775,528,967,505,317,847,799,625,156,998,184,305,238,79,647,223,987,413,640,613,827,890,460,138,739,919,208,216,73,810,624,155,862,239,745,153,975,393,86,792,100,339,581,404,947,896,191,411,571,639,131,856,927,361,353,642,334,219,887,20,113,540,657,894,103,106,817,785,991,861,381,617,336,6,349,587,240,797,920,377,187,419,741,964,152,340,787,15,821,471,350,578,398,753,705,427,237,346,752,82,497,76,83,130,829,696,81,551,614,365,474,222,904,819,90,716,681,828,816,197,14,722,956,729,108,660,854,67,593,344,811,198,280,773,285,852,394,226,880,325,26,952,442,893,791,323,958,228,693,299,653,941,356,712,632,833,425,310,588,616,646,580,162,235,362,360,479,612,996,493,759,270,809,170,146,489,723,977,378,917,475,7,409,23,375,582,463,610,671,364,148,183,484,44,585,265,47,315,99,823,488,535,194,873,740,443,518,384,272,599,577,455,906,860,936,597,594,572,922,813,863,800,111,556,395,151,886,457,901,658,761,750,913,583,8,211,545,711,684,889,392,662,249,596,312,45,916,931,483,220,869,295,114,781,900,993,510,133,663,783,495,871,434,649,54,282,386,244,142,878,202,742,421,428,256,274,61,436,953,297,763,757,412,969,370,915,368,440,935,260,868,136,902,708,601,65,804,3,415,250,53,802,650,530,678,725,776,697,307,508,461,322,486,531,999,974,877,732,172,568,264,656,778,909,49,990,11,604,122,718,536,63,42,88,897,668,661,289,782,988,276,907,542,675,592,963,960,161,248,976,707,94,840,441,401,126,955,24,163,51,621,367,895,92,903,283,391,204,687,609,943,217,418,934,735,247,335,911,679,784,779,369,420,637,780,209,254,857,429,788,573,554,314,169,766,157,328,454,144,21,699,603,363,654,50,446,966,476,397,19,738,501,985,433,277,116,320,803,620,499,849,60,376,178,822]
intList = [3,2,5,1,4,13]

{- smaller rethought algorithm -}
f_insertion::[Integer]->[Integer]
f_insertion [] = []
f_insertion [x] = [x]
f_insertion (x:xs) = f_insert $ f_insertion xs
  where
    f_insert::[Integer]->[Integer]
    f_insert [] = [x]
    f_insert (y:ys) = if x <= y then x:y:ys else y : f_insert ys

f_insertion_sort::[Integer]->[Integer]
f_insertion_sort list =
  let
    f_sort::[Integer]->[Integer]->[Integer]
    f_sort l [] = l
    f_sort xs (y:ys) = f_sort (f_insert xs y) ys
      where
        f_insert::[Integer]->Integer->[Integer]
        f_insert [] y = [y]
        f_insert (x:xs) y = if y <= x then y:x:xs else x : f_insert xs y
  in
    f_sort [] list
